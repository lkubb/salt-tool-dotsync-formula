{#- vim: ft=jinja #}

{%- set users = {} -%}

{%- set user_settings = ["xdg", "completions", "dotconfig", "persistenv", "rchook", "completions", "dotsync"] -%}

{#- rejectattr filter does not fit with mapping. need to filter out users before merging default values -#}
{%- for tool_user, tool_user_conf in mapdata.get("users", {}).items() -%}
{#- by default, install tool if it was targeted. explicitly deny for a specific user to override -#}
  {%- if tool_user_conf.get("dotsync", true) -%}
    {%- do users.update({tool_user: {"dotsync": {}}}) -%}
    {%- for user_setting in user_settings -%}
      {%- if tool_user_conf.get(user_setting) is not equalto None -%}
        {%- do users[tool_user].update({user_setting: salt["defaults.deepcopy"](tool_user_conf[user_setting])}) -%}
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
{%- endfor -%}

{#- update all users' configurations for this formula with the formula defaults -#}
{%- do salt["defaults.update"](users, {"dotsync": mapdata.get("defaults", {})}) -%}

{#- embed user information that will be reused (home, primary group, shell, paths) -#}
{%- for user in users.keys() -%}
  {%- do users[user].update({"_dotsync": {}}) -%}
  {%- do users[user].update({"name": user}) -%}
  {%- set user_info = salt["user.info"](user) -%}
  {%- load_yaml as user_info -%}
group: {{ salt["user.primary_group"](user) }}
home: {{ user_info.home }}
shell: {{ user_info.shell.split("/")[-1] }}
  {%- endload -%}
  {%- do users[user].update(salt["defaults.merge"](user_info, users[user], in_place=false)) -%}
  {%- if users[user].xdg | default(true) -%}
    {#- cannot use environ.get because it only has access to current env, not a specific user's -#}
    {%- load_yaml as xdg -%}
cache: {{ salt["cmd.run"]('[ -n "$XDG_CACHE_HOME" ] && echo "${XDG_CACHE_HOME}" || echo "${HOME}/.cache"', runas=user) }}
config: {{ salt["cmd.run"]('[ -n "$XDG_CONFIG_HOME" ] && echo "${XDG_CONFIG_HOME}" || echo "${HOME}/.config"', runas=user) }}
data: {{ salt["cmd.run"]('[ -n "$XDG_DATA_HOME" ] && echo "${XDG_DATA_HOME}" || echo "${HOME}/.local/share"', runas=user) }}
state: {{ salt["cmd.run"]('[ -n "$XDG_STATE_HOME" ] && echo "${XDG_STATE_HOME}" || echo "${HOME}/.local/state"', runas=user) }}
    {%- endload -%}
    {%- do users[user].update({"xdg": xdg}) -%}
    {%- do users[user]["_dotsync"].update({
        "configdir": xdg.config,
        "datadir": xdg.data,
        "prefix": "",
    }) -%}
  {%- else -%}
    {#- cheap hack for savages ;D #}
    {%- do users[user]["_dotsync"].update({
        "configdir": users[user].home,
        "datadir": users[user].home,
        "prefix": ".",
    }) -%}
  {%- endif -%}

  {%- do users[user]["_dotsync"].update({
        "bindir": users[user].home | path_join(users[user].dotsync.bindir)
  }) -%}

  {%- for scope in ["config", "data"] -%}
    {%- set parsed = {} -%}

    {%- for tool in users[user].dotsync.get(scope, []) -%}
      {%- if tool is mapping -%}
        {%- set target = users[user].home | path_join(tool.values() | first) -%}
        {%- set tool = tool | first -%}
      {%- else -%}
        {%- set target = users[user]._dotsync[scope ~ "dir"] | path_join(users[user]._dotsync.prefix ~ tool) -%}
      {%- endif -%}
      {%- do parsed.update({tool: target}) -%}
    {%- endfor -%}

    {%- do users[user]._dotsync.update({scope: parsed}) -%}
  {%- endfor -%}
{%- endfor -%}

{#- finally embed parsed user config and info in mapdata -#}
{%- do mapdata.update({"users": users.values() | list}) -%}
